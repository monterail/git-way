#!/usr/bin/env sh
GITWAY_DIR=$(cd -P -- "$(dirname -- "$0")" && printf '%s\n' "$(pwd -P)")
GITWAY_VERSION=$(cat $GITWAY_DIR/VERSION)

usage() {
  read -d '' usage <<- EOF
Version: $GITWAY_VERSION

usage: git-way <subcommand> <branch-prefix> [<identifier>]

<identifier> will try to match one of existing feature or fix branches. It is
assumed that they are prefixed with 'feature/' and 'fix/' respectively, but the
prefix must not be included in the <identifier>, it is inferred from
<branch-prefix>.

Numeric <identifier> matches in the following way: '40' will match
<branch-prefix>/40-foo but not <branch-prefix>/404.

Non-numeric <identifier> matches any portion of the branch name. E.g. 'foo' will
match <branch-prefix>/foo, <branch-prefix>/foobar and feature/40-foo.

If the current branch is a feature or fix branch you can omit <branch-prefix>
and <identifier>.


Subcommands:
  open        Switches to branch specified by <identifier>. It will be created
              if needed and automatically track respective remote branch if it
              exists.

  release     Merges branch specified by <identifier> into master branch and pushes
              to remote. Both local branch and its tracked remote branch will be
              deleted afterwards.

  stage       Merges branch specified by <identifier> into staging branch and
              pushes to remote.

  sync        Synchronizes local branch with its tracked remote branch, i.e.
              rebases local branch onto remote and pushes changes to remote.

EOF

  echo "$usage"
}

main() {
  SUBCOMMAND=$1; shift
  BRANCH_PREFIX=$1
  BRANCH_IDENTIFIER=$2

  . "$GITWAY_DIR/git-way-common"

  BRANCH=$(identify_branch $BRANCH_PREFIX $BRANCH_IDENTIFIER)

  if [ ! -e "$GITWAY_DIR/git-way-$SUBCOMMAND" ] || [ -z $BRANCH ]; then
    usage
    exit 1
  fi

  . "$GITWAY_DIR/git-way-$SUBCOMMAND"

  cmd_$SUBCOMMAND $BRANCH
}

main "$@"

